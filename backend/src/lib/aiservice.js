const { GoogleGenerativeAI } = require("@google/generative-ai");
const ai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function summarizeWithLLM({ transcript, prompt }) {
  try {
    // Defensive truncation to keep tokens sane, if using any paid api key(GEMINI_API_KEY IS FREE)
    const clipped = transcript.length > 180000 ? transcript.slice(0, 180000) : transcript;

    const sys = `You are a meeting-notes assistant. Output must be structured, concise, and safe.
      - Respect the user's custom instruction.
      - Always produce sections: "Summary", "Action Items", "Decisions", "Risks", "Next Steps".
      - Use bullet points when applicable.
      - If the transcript is noisy or missing info, note assumptions clearly.`;

    const userPrompt = `CUSTOM INSTRUCTION:\n${prompt}\n\nTRANSCRIPT:\n${clipped}`;

    const model = await ai.getGenerativeModel({ model: "gemini-2.5-flash" });
    const result = await model.generateContent([sys, userPrompt]);
    text = result.response.text();
    text = text
      .replace(/\*/g, "") // all asterisks
      .replace(/#/g, "") // all hashtags
      .replace(/[_`]/g, ""); // underscores, backticks
    console.log(text);

    if (!text) {
      const err = new Error("No summary generated by AI.");
      err.status = 502;
      throw err;
    }
    return text; // return summary
  } catch (error) {
    console.error("summarizeWithLLM error:", error);
    throw new Error(
      error?.message || "Failed to generate summary. Please try again later."
    );
  }
}

module.exports = {summarizeWithLLM}
